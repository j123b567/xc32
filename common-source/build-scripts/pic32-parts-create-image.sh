#!/bin/bash
set -e 

# Script to copy part support and info files generated by pic32-parts-gen.sh
# to update-installer image folder 
#

# Get common directory names from  pic32-parts-inc.sh 
source `dirname $0`/pic32-parts-inc.sh
SCRIPTROOT=`cd $(dirname $0) && pwd -P`

# Get JUnit functions if building on Bamboo  
if [ ! -z $BAMBOO_BUILD ]; then
  source `dirname $0`/bamboo/shell2junit/sh2ju.sh
fi

# Function to create xc32 isntallation image directories 
makeimagedirs ()
{
  # Create log dir if it does not exists 
  if [ ! -d "$LOGDIR" ]; then
    mkdir $LOGDIR
  fi

  log "Creating/cleaning image directories in $IMAGEDIR"

  #Create image dir
  rm -rf $IMAGEDIR
  mkdir $IMAGEDIR
  
  pushd $IMAGEDIR > /dev/null
  mkdir -p bin/device_files
  mkdir -p bin/device_files/device-specs
  mkdir -p docs/config_docs
  mkdir -p pic32-libs
  mkdir -p pic32-libs/include/lega-c
  mkdir -p pic32-libs/include/proc
  mkdir -p pic32-libs/libpic32
  mkdir -p pic32-libs/proc
  mkdir -p pic32mx/bin/device_files
  mkdir -p pic32mx/device_files
  mkdir -p pic32mx/include/lega-c
  mkdir -p pic32mx/include/lega-c/sys
  mkdir -p pic32mx/include/proc
  mkdir -p pic32mx/include/sys
  mkdir -p pic32mx/lib/proc
  
  popd > /dev/null
}

copypic32mparts2image ()
{
  ORIG_DIR=`pwd`

  #We dont check if the file exists because pic32-parts-gen.sh would
  #have done that. If copying fails, this script will halt because of set -e
  pushd ${PYOUTDIR} > /dev/null
  DEVICEDIRWILDLIST=(./{32,MEC,MGC,USB49,USB7,BT,MTCH63,USB249,WFI}*)
  popd > /dev/null
  
  # Remove wildcard patterns that didn't match a directory
  for DEVICEDIR in "${DEVICEDIRWILDLIST[@]}"
  do
    if [[ $DEVICEDIR != *"*" ]]; then
      DEVICEDIRLIST+=(${DEVICEDIR})
    fi
  done

  log "Copy device-specific header files to image directory"
  for DEVICEDIR in "${DEVICEDIRLIST[@]}"
  do
    pushd ${PYOUTDIR}/${DEVICEDIR} > /dev/null
    find . -name "*.h" -exec cp {} ${IMAGEDIR}/pic32mx/include/proc/{} \;
    find . -name "*.h" -exec cp {} ${IMAGEDIR}/pic32-libs/include/proc/{} \;
    popd > /dev/null
  done
  
  log "Copying proc/<device> folders to image/pic32-libs directory"
  for DEVICEDIR in "${DEVICEDIRLIST[@]}" 
  do
    if [ -d "${PYOUTDIR}/${DEVICEDIR}" ]; then
      if [ "$HOST" = "Darwin" ] ; then 
        DEVICE=`echo $DEVICEDIR | sed -Ee "s/^(.+\/)*//"`
      else
        DEVICE=`echo $DEVICEDIR | sed -re "s/^(.+\/)*//"`
      fi
      if [ "$(ls -A ${PYOUTDIR}/${DEVICEDIR})" ]; then
       mkdir ${IMAGEDIR}/pic32-libs/proc/${DEVICE}
       cp ${PYOUTDIR}/${DEVICEDIR}/* ${IMAGEDIR}/pic32-libs/proc/${DEVICE}
      fi
    fi
  done
  
  log "Copying proc/<device> folders to image/pic32mx directory"
  for DEVICEDIR in "${DEVICEDIRLIST[@]}" 
  do 
    if [ -d "${PYOUTDIR}/${DEVICEDIR}" ]; then
      if [ "$HOST" = "Darwin" ] ; then 
        DEVICE=`echo $DEVICEDIR | sed -Ee "s/^(.+\/)*//"`
      else
        DEVICE=`echo $DEVICEDIR | sed -re "s/^(.+\/)*//"`
      fi
      if [ "$(ls -A ${PYOUTDIR}/${DEVICEDIR})" ]; then
       mkdir -p ${IMAGEDIR}/pic32mx/lib/proc/${DEVICE}
       cp ${PYOUTDIR}/${DEVICEDIR}/* ${IMAGEDIR}/pic32mx/lib/proc/${DEVICE}
      fi
    fi
  done

  log "Copying xc.h to image directory : cp ${PYOUTDIR}/xc.h ${IMAGEDIR}/pic32-libs/include"
  cp ${PYOUTDIR}/xc.h ${IMAGEDIR}/pic32-libs/include
  cp ${PYOUTDIR}/xc-pic32m.h ${IMAGEDIR}/pic32-libs/include

  if [ -f ${PYOUTDIR}/xc.h ]; then
      cp ${PYOUTDIR}/xc.h ${IMAGEDIR}/pic32mx/include
  fi
  if [ -f ${PYOUTDIR}/xc-pic32m.h ]; then
      cp ${PYOUTDIR}/xc-pic32m.h ${IMAGEDIR}/pic32mx/include
  fi
  
  log "Copying config .html files to image directory"
  if [ -f ${PYOUTDIR}/PIC32ConfigSet.html ]; then
      cp ${PYOUTDIR}/PIC32ConfigSet.html ${IMAGEDIR}/docs
  fi

  if ls  ${PYOUTDIR}/config_docs/*.html   1> /dev/null 2>&1; then
      cp ${PYOUTDIR}/config_docs/*.html ${IMAGEDIR}/docs/config_docs
  fi
  
  log "Copying .info files to image directory"

  if [ -f ${RESOUTDIR}/xc32_device.info ]; then 
  cp ${RESOUTDIR}/xc32_device.info ${IMAGEDIR}/bin
  cp ${RESOUTDIR}/xc32_device.info ${IMAGEDIR}/pic32mx
  fi

  if ls  ${RESOUTDIR}/*.info 1> /dev/null 2>&1; then
      cp ${RESOUTDIR}/*.info ${IMAGEDIR}/bin/device_files
      cp ${RESOUTDIR}/*.info ${IMAGEDIR}/pic32mx/device_files
      cp ${RESOUTDIR}/*.info ${IMAGEDIR}/pic32mx/bin/device_files
  fi
  
  log "Copying .xml files to image directory"
  # The deviceSupport.xml file will be rebuilt later with the full pic32c/pic32m device list.
  if [ -f ${RESOUTDIR}/deviceSupport.xml ]; then
      cp ${RESOUTDIR}/deviceSupport.xml ${IMAGEDIR}/bin
  fi
  if [ -f  ${RESOUTDIR}/.LanguageToolSuite ]; then
      cp ${RESOUTDIR}/.LanguageToolSuite ${IMAGEDIR}/bin
      cp ${RESOUTDIR}/.LanguageToolSuite ${IMAGEDIR}/pic32-libs/proc/XC32.LanguageToolSuite
  fi

  #If we are generating part-support for full build, then exit here
  if [ ! -z $bamboo_PART_GEN_FOR_FULL ]; then
    exit 0
  fi

  #log "Getting files that are not generated from pic32-libs fossil repo"
  #We no longer use fossil. Get the BitBucket repo from Bamboo instead
  #fossilopenup $FOREPP32LIB $VCSBRATAG

  log "Copying defines.mk and proc/Makefile to image directory"
  #FP32LIBDIR=${FOSOPENDIR}/$FOREPP32LIB
  FP32LIBDIR=pic32-libs
  
  cp ${FP32LIBDIR}/defines.mk ${IMAGEDIR}/pic32-libs 
  cp ${FP32LIBDIR}/proc/Makefile ${IMAGEDIR}/pic32-libs/proc 

  log "Copying proc/32MXGENERIC and libpic32/startup to image directory"
  cp -r ${FP32LIBDIR}/proc/32MXGENERIC ${IMAGEDIR}/pic32-libs/proc

  cp -r ${FP32LIBDIR}/libpic32/startup ${IMAGEDIR}/pic32-libs/libpic32 

#  log "Copying p32m4kcore.h, p32generic.h and ppic32mx.h files to image directory"
#  cp ${FP32LIBDIR}/include/proc/p32m4kcore.h ${IMAGEDIR}/pic32-libs/include/proc
#  cp ${FP32LIBDIR}/include/lega-c/proc/p32m4kcore.h ${IMAGEDIR}/pic32-libs/include/lega-c/proc
  cp ${FP32LIBDIR}/include/proc/p32mxgeneric.h ${IMAGEDIR}/pic32-libs/include/proc
  cp ${FP32LIBDIR}/include/proc/ppic32mx.h ${IMAGEDIR}/pic32-libs/include/proc

#  cp ${FP32LIBDIR}/include/proc/p32m4kcore.h ${IMAGEDIR}/pic32mx/include/proc
#  cp ${FP32LIBDIR}/include/lega-c/proc/p32m4kcore.h ${IMAGEDIR}/pic32mx/include/lega-c/proc
  cp ${FP32LIBDIR}/include/proc/p32mxgeneric.h ${IMAGEDIR}/pic32mx/include/proc
  cp ${FP32LIBDIR}/include/proc/ppic32mx.h ${IMAGEDIR}/pic32mx/include/proc

  log "Copying l1cache.h to image directory"
  cp ${FP32LIBDIR}/include/sys/l1cache.h ${IMAGEDIR}/pic32mx/include/sys
  cp ${FP32LIBDIR}/include/lega-c/sys/l1cache.h ${IMAGEDIR}/pic32mx/include/lega-c/sys

  log "Copying cp0defs.h to image directory"
  cp ${FP32LIBDIR}/include/cp0defs.h ${IMAGEDIR}/pic32-libs/include
  cp ${FP32LIBDIR}/include/lega-c/cp0defs.h ${IMAGEDIR}/pic32-libs/include/lega-c
  
  cp ${FP32LIBDIR}/include/cp0defs.h ${IMAGEDIR}/pic32mx/include
  cp ${FP32LIBDIR}/include/lega-c/cp0defs.h ${IMAGEDIR}/pic32mx/include/lega-c
 
  log "Make processor library & startup code and install in ${IMAGEDIR}"
  cd ${IMAGEDIR}/pic32-libs/proc
  make clean
  if [ -z $BAMBOO_BUILD ]; then 
    which xc32-gcc
    checkreturn $? "xc32-gcc not found in PATH"  
    make all -j6 DESTROOT=${IMAGEDIR}
    make install -j2 DESTROOT=${IMAGEDIR}
    checkreturn $? "make all install DESTROOT=${IMAGEDIR} in pic32-libs/proc failed" #dead code
  else
    # if building on bamboo, use JUnit error logging
    if [ "$MCHP_RESOURCE" = "0" ]; then
     set +e
     mv Makefile Makefile.orig
     sed 's/install\: \$(SUBDIRS)/install\:/g' Makefile.orig > Makefile
     #Log proper error if xc32-gcc is not available in $PATH
     juLog -name="Check for XC32 binaries in $PATH. If this has failed, edit xc32-parts-bamboo-stage2.sh" which xc32-gcc
     # if buidling a nightly, continue on errors (-k)
     juLog -name="Build device specific library" -ierror=error make -k all -j6 DESTROOT=${IMAGEDIR}
     juLog -name="Install device specific library" -ierror=error make install -j2 DESTROOT=${IMAGEDIR}
     set -e
    else
     #Log proper error if xc32-gcc is not available in $PATH
     set +e
     juLog -name="Check for XC32 binaries in $PATH. If this has failed, edit xc32-parts-bamboo-stage2.sh" which xc32-gcc
     juLog -name="Build device specific library" -ierror=error make all -j6 DESTROOT=${IMAGEDIR}
     juLog -name="Install device specific library" -ierror=error make install -j2 DESTROOT=${IMAGEDIR}
     set -e
    fi
  fi

  #Delete .h files from pic32-libs/proc/ folders
  log "Deleting .h files from folders under pic32-libs/proc"
  find ${IMAGEDIR}/pic32-libs/proc/ -name *.h -exec rm {} \;
  checkreturn $? "Error deleting .h files form pic32-libs/proc/ folders" #dead code

  #Compress pic32-libs
  cd ${IMAGEDIR}/pic32-libs
  zip -rq ../pic32m-libs_v${bamboo_XC32_PARTS_VERSION}_${bamboo_XC32_PARTS_RESOURCE}_parts_update.zip *
  cd ${IMAGEDIR}
  
  rm -rf  ${IMAGEDIR}/pic32-libs
  mkdir  ${IMAGEDIR}/pic32-libs
  
  mv pic32m-libs_v${bamboo_XC32_PARTS_VERSION}_${bamboo_XC32_PARTS_RESOURCE}_parts_update.zip  ${IMAGEDIR}/pic32-libs
  
  cd ${ORIG_DIR}
}

copypic32cparts2image ()
{
  log "copy pic32c parts image"

  rm -rf ./image/pic32c
  mkdir -p ./image/pic32c

  rm -rf ./image/pic32c/include
  rm -rf ./image/pic32c/include_mcc
  mkdir -p ./image/pic32c/include/proc
  mkdir -p ./image/pic32c/include_mcc/proc

  rm -rf install-Linux/pic32c/include/proc
  rm -rf install-Linux/pic32c/include_mcc/proc
  mkdir -p install-Linux/pic32c/include/proc
  mkdir -p install-Linux/pic32c/include_mcc/proc

  pushd ./pic32c-libs/include > /dev/null
  cp -R ./proc ../../image/pic32c/include/
  cp -R ./proc ../../install-Linux/pic32c/include/
  popd > /dev/null

  pushd ./pic32c-libs/include_mcc > /dev/null
  cp -R ./proc ../../image/pic32c/include_mcc/
  cp -R ./proc ../../install-Linux/pic32c/include_mcc/
  popd > /dev/null

  # Generate a new xc.h file for pic32c
  echo ${SCRIPTROOT}/generate-pic32c-xc.h.sh ./image/pic32c/include > ./image/pic32c/include/xc.h
  ${SCRIPTROOT}/generate-pic32c-xc.h.sh ./image/pic32c/include > ./image/pic32c/include/xc.h
  cp -f ./image/pic32c/include/xc.h ./pic32c-libs/include/xc.h
  echo ${SCRIPTROOT}/generate-pic32c-xc.h.sh ./image/pic32c/include_mcc > ./image/pic32c/include_mcc/xc.h
  ${SCRIPTROOT}/generate-pic32c-xc.h.sh ./image/pic32c/include_mcc > ./image/pic32c/include_mcc/xc.h
  cp -f ./image/pic32c/include_mcc/xc.h ./pic32c-libs/include_mcc/xc.h

  rm -rf ./image/pic32c/lib
  mkdir -p ./image/pic32c/lib
  mkdir -p ./image/pic32c/lib/proc

  rm -rf ./install-Linux/pic32c/lib/proc
  mkdir -p ./install-Linux/pic32c/lib/proc

  pushd ./pic32c-libs/proc > /dev/null
  find . -type d -exec echo mkdir -p {} ../../image/pic32c/lib/proc/{} \;
  find . -type d -exec mkdir -p {} ../../image/pic32c/lib/proc/{} \;
  find . -type f -exec echo cp -p {} ../../image/pic32c/lib/proc/{} \;
  find . -type f -exec cp -p {} ../../image/pic32c/lib/proc/{} \;
  
  find . -type d -exec echo mkdir -p {} ../../install-Linux/pic32c/lib/proc/{} \;
  find . -type d -exec mkdir -p {} ../../install-Linux/pic32c/lib/proc/{} \;
  find . -type f -exec echo cp -p {} ../../install-Linux/pic32c/lib/proc/{} \;
  find . -type f -exec cp -p {} ../../install-Linux/pic32c/lib/proc/{} \;
  popd > /dev/null

  echo ${SCRIPTROOT}/pic32c/build-pic32c-specs.sh
  ${SCRIPTROOT}/pic32c/build-pic32c-specs.sh
  

}
  
# Script execuation starts here
processopts $1 $2 $3 $4
makeimagedirs
copypic32cparts2image
copypic32mparts2image
generatereadme
generatedevicesupportxml
log "$0 ALL OK!"


